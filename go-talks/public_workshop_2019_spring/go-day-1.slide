Golang workshop - Day 1

Buenos Aires
Septiembre 2019

APICore

* ¬øQui√©nes somos?

.image ./resources/eric.jpg 110 _
.caption [[mailto:eric.kohan@mercadolibre.com][Eric Kohan]] _Software_ _Engineering_ _Manager_

* ¬øQu√© hacemos? Team APICore

- Dise√±amos y desarrollamos las APIs centrales de MercadoLibre y MercadoPago.
- El desaf√≠o es la *escalabilidad* y la *consistencia*. Son problemas _grandes_: muchos datos (algunos muy sensibles $$$) y much√≠simo tr√°fico.
- Tienen que ser r√°pidas - cada segundo de espera empobrece la experiencia de uso.
- De alta disponibilidad - uptime 99.9...%
- Y costo-eficientes.

- *Golang* es un lenguaje espectacular para hacer esto.

* But first... WIFI

Red -> guest

Pass: mercadolibre

* Esta presentaci√≥n es auto-referencial ü§ì:

https://bit.ly/2kp2XhZ

* Roadmap

- Clase 1: Filosof√≠a de dise√±o. Go basics.
- Clase 2: Memoria, Composici√≥n, Interfaces, Testing.
- Clase 3: Concurrencia. APIs en Go.
- Clase 4: High Scalability Go: aplicando el lenguaje en MELI.

* Historia

- Arranca como proyecto en 2007 dentro de Google. Goals: eliminar la *lentitud* y la *torpeza* a la hora de desarrollar software en Google.
- Dise√±ado por Robert Griesemer, Rob Pike y Ken Thompson. [[https://www.youtube.com/watch?v=3yghHvvZQmA][Meet the authors]].
- Predecesores? `C`. 
- `C++`? No.
- Anunciado al mundo en 2009, en 2012 se estabiliza la API con la versi√≥n 1.0 . La versi√≥n actual es la 1.13, siguiendo su promesa de [[https://golang.org/doc/go1compat][compatibilidad]].

* Historia - el contexto en Google.

- Muchos developers en sus primeros a√±os de carrera, familiarizados -por la facultad- con lenguajes _procedurales_ como `C`.
- Es imperativo que los desarrolladores puedan ser *productivos* *muy* *r√°pidamente* con lenguajes y herramientas _serias_.
- El lenguaje fue dise√±ado por y para personas que escriben, leen y debuggean grandes piezas de software.

* Motivaci√≥n: ¬øpor qu√©?

	Programming had become too difficult and the choice of languages was partly to blame. 
	One had to choose either efficient compilation, efficient execution, or ease of programming; 
	all three were not available in the same mainstream language.

Necesidad de un lenguaje

- *Moderno*: pensado para el *cloud* y procesadores multi-core.
- *Amigable*: con herramientas de desarrollo (`testing`, `benchmarking`, `present`, `gofmt`) incluidas.
- *Eficiente*: compilado, con tipos est√°ticos.
- *R√°pido*: r√°pido para buildear, r√°pido para ejecutar.

* Motivaci√≥n: ¬øpor qu√©?

.image ./resources/compiling.png 500 _

.link https://xkcd.com/303/

* Motivaci√≥n: Objetivos

- Simple para escribir: menos es m√°s. 
- Simple para leer: nos pasamos mucho tiempo leyendo c√≥digo de otras personas.
- Concurrente (multi-core, asincr√≥nico).
- Para el cloud: que compile a un binario est√°tico sin dependencias.
- Memory footprint bajo.
- Lo mas "autocontenido" posible.

	... you can build a production binary on your Mac and ship it up to a Linux server 
	and just run it without any crazy installs or any worrying about dependency conflicts. 

	-- Brian Ketelsen, Microsoft. 

* Motivaci√≥n

- *El*"sweet*spot"*de*Go*est√°*en*escribir*software*de*backend*.

	Go is a good general purpose language, but the sweet spot it was designed for 
	is writing large-scale, concurrent, server-side software.

* Qui√©nes actualmente utilizan Go?

- Mercadolibre ;)
- YouTube 
- Google
- Microsoft
- Uber
- SpaceX
- Facebook
- Github
- Netflix

- [[https://github.com/golang/go/wiki/GoUsers][Otros...]]

* ¬øProyectos hechos en GO?

Docker

.image ./resources/docker.png _ _

* ¬øProyectos hechos en GO?

Kubernetes

.image ./resources/kubernetes.png _ _

* ¬øProyectos hechos en GO?

CockroachDB (first stable relese)

.image ./resources/cockroach.png _ _

* ¬øProyectos hechos en GO?

.image ./resources/dropbox.jpg _ _

* ¬øParadigma?

- Imperativo (lineal, paso a paso)
- Estructurado (loops, conditionals, functions)
- No orientado a objetos (¬ø?)

* Go Basics

- Fuertemente tipado
- Inferencia de tipos
- Funciones son _first_ _class_ _citizens_: las funciones pueden ser pasadas como par√°metros
- Par√°metros pasados siempre por _valor_, pero tenemos punteros
- [[https://www.youtube.com/watch?v=mX5em6x40CA&t=2h03m00s][Gargabage Collector]]
- "Semi‚Äù Orientado a objetos -> _Composition_, _Encapsulation_, _Polymorphism_, not _Inheritance_
- Built in Web Server
- Built in Testing framework


* Instalando GO!

- Descarga la versi√≥n para tu OS desde [[https://golang.org/dl/][AQU√ç]]
- Abr√≠ el pkg y segu√≠ las [[https://golang.org/doc/install][instrucciones]] en pantalla, Golang quedar√° instalado por default en -> /usr/local/go

	The GOPATH environment variable specifies the location of your workspace. 
	It defaults to a directory named go inside your home directory, 
	so $HOME/go on Unix, and %USERPROFILE%\go (usually C:\Users\YourName\go) on Windows.

- Exportar [[https://golang.org/doc/code.html#GOPATH][GOPATH]] apuntando a directorio de instalaci√≥n, agregar  GOPATH/bin al PATH y LISTO :)

	export GOPATH=$HOME/go
	export PATH=$PATH:$GOPATH/bin

- Para chequear tu la instalaci√≥n correcta tipear -> go version 

.link https://github.com/golang/go/wiki/SettingGOPATH Setting GOPATH

* ¬øDonde programar?

- [[https://www.jetbrains.com/go][Goland]]
- [[https://github.com/DisposaBoy/GoSublime][Plugin para Sublime]]
- [[https://github.com/joefitzgerald/go-plus][Plugin para Atom]]
- [[https://goclipse.github.io][Plugin para Eclipse]]
- [[https://plugins.jetbrains.com/plugin/?id=5047][Plugin para IntelliJ]]
- [[https://github.com/Microsoft/vscode-go][Plugin para Visual Studio Code]]
- [[https://github.com/visualfc/liteide][Lite Ide: Go IDE]]
- [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins][Varios mas... ]]

* Go Basics: Workspace

GOPATH
	|_ BIN: Contiene los archivos ejecutables
	|_ SRC: Contiene los fuentes organizados en paquetes
	|_ PKG: Contiene los paquetes en formato binario

*Default* *GOPATH* (go >1.8)

- Unix: $HOME/go 
- Windows: %USERPROFILE%/go (en general es `C:\Users\TuNombre\go`)

* 1¬∫ Ejercicio

Hacer el m√≠tico -> "Hello world" en Golang.

* Hello world!!

.play -edit ./resources/src/00_hello_world/main.go

Comandos b√°sicos desde consola

	go command [arguments]

	build     Compila paquetes y dependencias
	clean     Remueve archivos object     
	get       Descarga e instala paquetes y dependencias
	install   Compila e instala paquetes y dependencias
	run       Compila y corre paquetes y dependencias
	test      Testea paquetes
	fmt       Formatea tu c√≥digo
	...

* Keywords

- Los Keywords son palabras reservadas
- No pueden ser usados como identificadores
- Go apunta a ser simple y tener pocos keywords

.image ./resources/keywords.png _ _


* Comentarios

- 2 formas de hacer comentarios
- Estilo C
	/* Multiline comment
		..
	*/
- Estilo C++
	// Single line comment

* Tipos B√°sicos

- bool
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- float32 float64
- complex64 complex128
- [[https://blog.golang.org/strings][string]]
- byte // alias for uint8
- rune // alias for int32 - unicode code point

* Constantes

- Pueden ser del tipo: rune, string, boolean o valores num√©ricos

- Ejemplos:

	const World = "‰∏ñÁïå"
	const Truth = true


* Inicializaci√≥n de Variables

	var s string
	var s string = ""
	var s = ""
	s:=""

*Zero* *value:*

*0* para num√©ricos - *false* para booleanos - *""* para strings

.play -edit ./resources/src/01_zero_values/main.go

* Paquetes

.code -edit ./resources/src/04_packages/math/math.go
.play -edit ./resources/src/04_packages/main.go

* Tipos de if

	if x < 0 { }

	if v := math.Pow(x, n); v < lim {}

	if ... {} else { }

* Iteraciones #1

_for_initialization;_condition;_post_{_}_

.play -edit ./resources/src/02_iterations/0/main.go

* Iteraciones #2

_for_condition_{_}_

.play -edit ./resources/src/02_iterations/1/main.go

* Iteraciones #3

_for_{_}_

.play -edit ./resources/src/02_iterations/2/main.go

* Iteraciones #4

_using_range_

.play -edit ./resources/src/02_iterations/3/main.go

* Switch

.play -edit ./resources/src/02_iterations/4/main.go

* Funciones

.play -edit ./resources/src/03_functions/main.go

.link https://blog.golang.org/gos-declaration-syntax Go's Declaration Syntax

* Conversi√≥n de variables

.play -edit ./resources/src/05_variables_type_convertion/main.go

* 2¬∫ Ejercicio

Hacer un programa que reciba un par√°metro *p* por consola y que calcule la suma de los valores *v* tales que *0*<=*v*<=*p* , siendo *v* un n√∫mero divisible por *3* o por *5*

- Ayuda para leer argumentos desde la consola

	for i := 1; i < len(os.Args); i++ {
		fmt.Println(os.Args[i])
	}

* Por qu√© est√° bueno estudiar Golang hoy?

- Fact 1: es √∫til llegar temprano.

.image ./resources/technology_adoption.png 500 _

* Por qu√© est√° bueno estudiar Golang hoy?

- Fact 2: Go es muy joven y crece muy r√°pido -> somos early adopters!

.image ./resources/programming_language_trends.png 400 _

.link https://www.benfrederickson.com/ranking-programming-languages-by-github-users/ Ranking Programming Languages by GitHub Users

* Por qu√© est√° bueno estudiar Golang hoy?

- Y a la gente parece gustarle:

.image ./resources/most_loved.png 400 _

.link https://insights.stackoverflow.com/survey/2018#most-loved-dreaded-and-wanted Stack Overflow - Developer Survey Results 2018
