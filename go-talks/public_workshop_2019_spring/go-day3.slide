Golang Workshop - Day 3

Buenos Aires

Septiembre 2019

APICore

* ¿Quiénes somos?

.image ./resources/eze-colombino.jpg 110 _
.caption [[mailto:ezequiel.colombino@mercadolibre.com][Ezequiel Colombino]] _Software_ _Engineer_

.image ./resources/facu-garcia-reyna.jpg 110 _
.caption [[mailto:facundo.rgarcia@mercadolibre.com][Facundo García Reyna]] _Software_ _Engineer_


* WIFI

Red -> guest

Pass: mercadolibre

* Errors

.play -edit ./resources/src/12_errors/main.go

* Defer

- Defer es una sentencia que permite ejecutar código después del return de la función que la contiene.
- Los argumentos de una función diferida son evaluados al momento de evaluar la sentencia defer.
- Las llamadas a funciones diferidas son ejecutadas siguiendo un orden LIFO luego de que la función que las contiene devuelve el control.

.play -edit ./resources/src/13_defer/ex1.go

* Defer

.play -edit ./resources/src/13_defer/ex2.go

* Defer

.play -edit ./resources/src/13_defer/ex3.go

* Panic y Recover

Las instrucciones panic() y recover() son similares a lanzar y capturar una excepción en otros lenguages.
panic() debe ser utilizado únicamente donde el error es irrecuperable y no tiene sentido que la ejecución normal del código prosiga.

.play -edit ./resources/src/16_recover/ex1.go

Cuando una función F() llama a panic(), se frena la ejecución de F, todas las funciones diferidas son ejecutadas normalmente y luego F() retorna al cliente que la invoca. Para el cliente, F() se comporta como una llamada a panic().

* Panic y Recover

.play -edit ./resources/src/16_recover/ex2.go /START OMIT/,/END OMIT/

[[https://about.sourcegraph.com/blog/go-when-is-it-ok-to-recover][When it is ok to recover?]]

* Goroutines

Una goroutine es una función que se ejecuta concurrentemente con otro código.

Cada programa de Go tiene al menos una goroutine ("main() goroutine") que es creada y ejecutada automáticamente cuando el proceso comienza.

.play -edit ./resources/src/14_gorutines/ex1.go

* Goroutines

.play -edit ./resources/src/14_gorutines/ex2.go

* Goroutines

.play -edit ./resources/src/14_gorutines/ex3.go

* Como esperar más inteligentemente

- Usar sync.WaitGroup
- Usar channels

* WaitGroup

.play -edit ./resources/src/23_wait_group/main.go

* Channels

Un channel en Golang es un tipo de dato, un conducto, que nos permite enviar y recibir mensajes a través de él.

Creación de un channel:

	var sChannel chan string = make(chan string)

El operador <- nos permite enviar información a un channel:

	sChannel <- "hello"

y recibir información desde él:

	var s string = <- sChannel

los channels son bloqueantes, es decir, cada vez que agregamos información a un channel el emisor se bloquea hasta que un receptor toma el mensaje del conducto. Esto los hace una excelente herramienta para sincronizar goroutines sin un mecanismo de lock especifico.

* Channels continuación

A la creación de un channel se le puede asignar un tamaño dando lugar a un buffered Channel:
 
	var sChannel chan string = make(chan string, 100)
 
en estos casos el emisor sólo se bloqueará cuando el buffer esté lleno y el receptor cuando esté vacío.

Útiles cuando

- El número de goroutines a ser lanzando es conocido
- Se quiere limitar el número de goroutines que van a ser lanzadas o la cantidad de trabajo encolado
 
Para iterar sobre el contenido de un channel podemos utilizar el for + range:
 
	for s := range sChannel {
		// do something with s
	}

* Channels continuación

Usamos la función close() para cerrar un channel e indicar a todos los consumers que dicho channel no se van a enviar más elementos y así liberarlos.
 
	close(intChannel)
 
los consumers pueden chequear el status de un channel mediante un segundo parámetro en la expresión de asignación:
 
	v, ok := <- sChannel

[[https://blog.golang.org/share-memory-by-communicating][Share memory by communicating]]

* Wait usando channel

.play -edit ./resources/src/22_channels/wait/main.go

* Buffered channel

.play -edit ./resources/src/22_channels/buffered/main.go

* Buffered channel

.play -edit ./resources/src/22_channels/buffered/ex2.go

* Buffered channel

.play -edit ./resources/src/22_channels/buffered/ex3.go

* Channel Synchronization

.play -edit ./resources/src/22_channels/synchronization/basic/main.go

* Channel Synchronization

.play -edit ./resources/src/22_channels/synchronization/select/main.go

* Ejercicio

	Armar un programa que permita simular un punto de un partido de Tenis 
	entre Del Potro y Djokovic, usando goroutines y unbuffered channels. 
	Extra: Tratemos de que gane Del Potro.

* Building APIs in Go

.image ./resources/gingonic.png 500 500

* Varias opciones

- [[http://beego.me/][*Beego*]]: Framework web -> Templates & ORM 
- [[https://github.com/go-martini/martini][*Martini*]]: Framework web -> @deprecated
- [[https://gin-gonic.github.io/gin/][*Gin-Gonic*]]: Framework web -> Basado en Martini 10x mas performante
- [[https://goji.io/][*Goji*]]: Request Multiplexer
- [[http://www.gorillatoolkit.org/][*Gorilla*]]: Web toolkit
- [[https://github.com/julienschmidt/httprouter][*httprouter*]]: High performance router
- [[https://golang.org/pkg/net/http][*net/http*]]: Libreria http estandar de go
- ….

* ¿Por qué Gin-Gonic?

- Compatible con net/http
- Usa httprouter (muy rápido)
- Interface familiar y amigable
- Trabaja bien con JSON
- Más de 20000 estrellas en github
- No reinventar la rueda
- Había que elegir uno :)

* Instalando gin-gonic

	go get -u github.com/gin-gonic/gin

* Ejemplo: Ping

.play -edit ./resources/src/18_gin_hello_world/main.go

* Métodos http soportados

	func main() {

		router := gin.Default()

		router.GET("/someGet", getting)
		router.POST("/somePost", posting)
		router.PUT("/somePut", putting)
		router.DELETE("/someDelete", deleting)
		router.PATCH("/somePatch", patching)
		router.HEAD("/someHead", head)
		router.OPTIONS("/someOptions", options)

		// By default it serves on :8080
		router.Run()
	}


* Params

.play -edit ./resources/src/19_gin_params/main.go

* Parámetros en Querystring

.play -edit ./resources/src/20_gin_query_params/main.go

* Otro ejemplo: query + post form

.play -edit ./resources/src/21_gin_post/main.go

* Model Binding y validación

.play -edit ./resources/src/22_gin_model/main.go /START OMIT/,/END OMIT/

* Middlewares

	r := gin.Default()    equivale a 	   r := gin.New()
											r.Use(gin.Logger())
											r.Use(gin.Recovery())

.image ./resources/gingonic_middlewares.png

* Custom Middlewares (authorization, gzip, etc) 

	Router.Use(dataDogHandler())
	
	func dataDogHandler() gin.HandlerFunc {

		return func(c *gin.Context) {
	
			initTime := time.Now()
			c.Next()
	
			godog.RecordFullMetric("api.request.time", time.Since(initTime).Seconds()*1000,
				new(godog.Tags).Add("method", c.Request.Method).ToArray()...)
	
			godog.RecordSimpleMetric(fmt.Sprintf("api.response.code%sXX", 
				strconv.FormatInt(int64(c.Writer.Status()), 10)[0:1]), 1, 
				new(godog.Tags).Add("code", strconv.Itoa(c.Writer.Status())).ToArray()...)
	
		}
	
	}

* Otros temas importantes

- [[https://github.com/gin-gonic/gin/blob/master/README.md#upload-files][Uploading Files]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md#grouping-routes][Grouping Routes]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md#xml-json-and-yaml-rendering][XML, JSON and YAML rendering]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md#serving-static-files][Serving static files]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md#html-rendering][HTML Rendering]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md#redirects][Redirects]]
- [[https://github.com/gin-gonic/gin/blob/master/README.md][etc ...]]


* Ejercicio

	Evolucionar el primer ejercicio del curso de forma tal que ahora se ejecute 
	en un webserver que escuche en el puerto 8080 y sea invocado al llamar al servicio 
	GET /calculate?value=p. El servicio debe devolver la respuesta en formato JSON

* Challenge

.image ./resources/challenge_1.png

* Challenge

.image ./resources/challenge_2.png

* Challenge

.image ./resources/challenge_3.png

* Challenge

.image ./resources/challenge_4.png

* Challenge

.image ./resources/challenge_5.png

* Challenge

.image ./resources/challenge_6.png

* Challenge

.image ./resources/challenge_7.png